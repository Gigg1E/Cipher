module.exports = {
  sessions: {}, // { username: WebSocket }
  friendRequests: {}, // { username: [fromUser, ...] }
  users: {} // { username: { password, approved, banned, ip, requestedAt } }
};


// File: routes/api.js
const express = require('express');
const bcrypt = require('bcryptjs');
const router = express.Router();
const sessionStore = require('../util/sessionStore');

// Utility middleware
function requireAdmin(req, res, next) {
  const username = req.session.user;
  const user = sessionStore.users[username];
  if (user && user.isAdmin) return next();
  return res.status(403).json({ error: 'Admin access required' });
}

// Check server status
router.get('/status', (req, res) => {
  res.json({ online: true, version: '0.2.1' });
});

// Signup with IP limit
router.post('/signup', async (req, res) => {
  const { username, password } = req.body;
  const ip = req.ip;

  if (sessionStore.users[username]) {
    return res.status(400).json({ error: 'User already exists' });
  }

  const userCount = Object.values(sessionStore.users).filter(u => u.ip === ip).length;
  if (userCount >= 2) {
    return res.status(429).json({ error: 'Max accounts per IP reached' });
  }

  const hash = await bcrypt.hash(password, 10);

  sessionStore.users[username] = {
    password: hash,
    approved: false,
    ip,
    banned: false,
    requestedAt: new Date().toISOString(),
    isAdmin: false
  };

  req.saveUsers();
  console.log(`📝 New signup request: ${username}`);
  res.json({ success: true, message: 'Signup request sent. Await admin approval.' });
});

// Session check
router.get('/session', (req, res) => {
  const username = req.session.user;
  if (!username) {
    return res.json({ loggedIn: false });
  }
  const user = sessionStore.users[username];
  if (!user || user.banned || !user.approved) {
    return res.json({ loggedIn: false });
  }
  res.json({ 
    loggedIn: true, 
    user: username, 
    isAdmin: user.isAdmin 
  });
});

// Login
router.post('/login', async (req, res) => {
  const { username, password } = req.body;
  const user = sessionStore.users[username];

  if (!user) return res.status(401).json({ error: 'User not found' });
  if (user.banned) return res.status(403).json({ error: 'User is banned' });
  if (!user.approved) return res.status(403).json({ error: 'Awaiting admin approval' });

  const valid = await bcrypt.compare(password, user.password);
  if (!valid) return res.status(401).json({ error: 'Incorrect password' });

  req.session.user = username;
  res.json({ success: true, user: username, isAdmin: user.isAdmin });
});

// Admin get pending
router.get('/admin/pending', requireAdmin, (req, res) => {
  const pending = Object.entries(sessionStore.users)
    .filter(([_, user]) => user.approved === false && !user.banned)
    .map(([username, user]) => ({ username, ip: user.ip, requestedAt: user.requestedAt }));

  res.json({ pending });
});

// Admin approve/ban
router.post('/admin/approve', requireAdmin, (req, res) => {
  const { username, approve, ban } = req.body;
  const user = sessionStore.users[username];

  if (!user) return res.status(404).json({ error: 'User not found' });

  user.approved = approve;
  user.banned = ban;
  req.saveUsers();
  res.json({ success: true });
});

// Friend request system
router.post('/friend-request', (req, res) => {
  const { from, to } = req.body;
  console.log(`📨 Friend request from ${from} to ${to}`);

  if (!sessionStore.friendRequests[to]) {
    sessionStore.friendRequests[to] = [];
  }
  sessionStore.friendRequests[to].push(from);
  res.json({ success: true });
});

router.get('/friends/:user', (req, res) => {
  const { user } = req.params;
  const requests = sessionStore.friendRequests[user] || [];
  res.json({ user, requests });
});

// User info fetch
router.get('/user/:username', (req, res) => {
  const user = sessionStore.users[req.params.username];
  if (!user) return res.status(404).json({ exists: false });
  res.json({
    exists: true,
    approved: user.approved,
    banned: user.banned,
    requestedAt: user.requestedAt,
    isAdmin: user.isAdmin || false
  });
});

module.exports = router;



------------------------------------------------------------------------------------

// File: routes/api.js
const express = require('express');
const bcrypt = require('bcryptjs');
const router = express.Router();
const sessionStore = require('../util/sessionStore');

// Utility middleware
function requireAdmin(req, res, next) {
  const username = req.session.user;
  const user = sessionStore.users[username];
  if (user && user.isAdmin) return next();
  return res.status(403).json({ error: 'Admin access required' });
}

// Check server status
router.get('/status', (req, res) => {
  res.json({ online: true, version: '0.2.1' });
});

// Signup with IP limit
router.post('/signup', async (req, res) => {
  const { username, password } = req.body;
  const ip = req.ip;

  if (sessionStore.users[username]) {
    return res.status(400).json({ error: 'User already exists' });
  }

  const userCount = Object.values(sessionStore.users).filter(u => u.ip === ip).length;
  if (userCount >= 2) {
    return res.status(429).json({ error: 'Max accounts per IP reached' });
  }

  const hash = await bcrypt.hash(password, 10);

  sessionStore.users[username] = {
    password: hash,
    approved: false,
    ip,
    banned: false,
    requestedAt: new Date().toISOString(),
    isAdmin: false
  };

  req.saveUsers();
  console.log(`📝 New signup request: ${username}`);
  res.json({ success: true, message: 'Signup request sent. Await admin approval.' });
});

// Session check
router.get('/session', (req, res) => {
  const username = req.session.user;
  if (!username) {
    return res.json({ loggedIn: false });
  }
  const user = sessionStore.users[username];
  if (!user || user.banned || !user.approved) {
    return res.json({ loggedIn: false });
  }
  res.json({ 
    loggedIn: true, 
    user: username, 
    isAdmin: user.isAdmin 
  });
});

// Login
router.post('/login', async (req, res) => {
  const { username, password } = req.body;
  const user = sessionStore.users[username];

  if (!user) return res.status(401).json({ error: 'User not found' });
  if (user.banned) return res.status(403).json({ error: 'User is banned' });
  if (!user.approved) return res.status(403).json({ error: 'Awaiting admin approval' });

  const valid = await bcrypt.compare(password, user.password);
  if (!valid) return res.status(401).json({ error: 'Incorrect password' });

  req.session.user = username;
  res.json({ success: true, user: username, isAdmin: user.isAdmin });
});

// Admin get pending
router.get('/admin/pending', requireAdmin, (req, res) => {
  const pending = Object.entries(sessionStore.users)
    .filter(([_, user]) => user.approved === false && !user.banned)
    .map(([username, user]) => ({ username, ip: user.ip, requestedAt: user.requestedAt }));

  res.json({ pending });
});

// Admin approve/ban
// Approve user endpoint
router.post('/admin/approve', requireAdmin, (req, res) => {
  const { username } = req.body;
  const user = sessionStore.users[username];
  if (!user) return res.status(404).json({ error: 'User not found' });

  user.approved = true;
  user.banned = false;  // Clear ban if approving
  req.saveUsers();
  res.json({ success: true });
});

// Ban user endpoint
router.post('/admin/ban', requireAdmin, (req, res) => {
  const { username } = req.body;
  const user = sessionStore.users[username];
  if (!user) return res.status(404).json({ error: 'User not found' });

  user.banned = true;
  user.approved = false;  // Un-approve if banned
  req.saveUsers();
  res.json({ success: true });
});


// Friend request system
router.post('/friend-request', (req, res) => {
  const { from, to } = req.body;
  console.log(`📨 Friend request from ${from} to ${to}`);

  if (!sessionStore.friendRequests[to]) {
    sessionStore.friendRequests[to] = [];
  }
  sessionStore.friendRequests[to].push(from);
  res.json({ success: true });
});

router.get('/friends/:user', (req, res) => {
  const { user } = req.params;
  const requests = sessionStore.friendRequests[user] || [];
  res.json({ user, requests });
});

// User info fetch
router.get('/user/:username', (req, res) => {
  const user = sessionStore.users[req.params.username];
  if (!user) return res.status(404).json({ exists: false });
  res.json({
    exists: true,
    approved: user.approved,
    banned: user.banned,
    requestedAt: user.requestedAt,
    isAdmin: user.isAdmin || false
  });
});

module.exports = router;
-------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Cipher Chat</title>
  <style>
        :root {
      --glass-bg: rgba(30, 30, 30, 0.35);
      --glass-border: rgba(255, 255, 255, 0.2);
      --accent: #00aaff;
      --accent-light: #8fd8ff;
      --offline-color: #666;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', sans-serif;
    }

    body, html {
      height: 100%;
      background: url('karsten-winegeart-MD6wA5Nqa-k-unsplash.jpg') no-repeat center center fixed;
      background-size: cover;
      color: white;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    header {
      backdrop-filter: blur(10px);
      background: var(--glass-bg);
      border-bottom: 1px solid var(--glass-border);
      padding: 16px 24px;
      font-size: 20px;
      font-weight: bold;
      box-shadow: 0 2px 12px rgba(0,0,0,0.3);
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-shrink: 0;
      z-index: 10;
    }

    #dmBtn {
      background: transparent;
      border: 1px solid var(--glass-border);
      border-radius: 8px;
      padding: 6px 12px;
      color: white;
      cursor: pointer;
    }

    #dmBtn:hover {
      background: rgba(255, 255, 255, 0.05);
    }

    .app-container {
      display: flex;
      flex: 1;
      height: calc(100vh - 64px); /* header height */
      overflow: hidden;
    }

    /* Left Sidebar - Rooms */
    .sidebar.rooms {
      width: 220px;
      background: var(--glass-bg);
      border-right: 1px solid var(--glass-border);
      display: flex;
      flex-direction: column;
      padding: 12px 8px;
      overflow-y: auto;
      user-select: none;
      flex-shrink: 0;
    }

    .sidebar.rooms h2 {
      font-size: 18px;
      font-weight: 700;
      margin-bottom: 12px;
      padding-left: 12px;
      color: var(--accent-light);
    }

    .room-list {
      list-style: none;
      flex: 1;
      overflow-y: auto;
    }

    .room-list li {
      padding: 10px 16px;
      border-radius: 12px;
      cursor: pointer;
      margin-bottom: 6px;
      transition: background-color 0.2s ease;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .room-list li:hover {
      background: rgba(0, 136, 255, 0.15);
    }

    .room-list li.active {
      background: rgba(0, 136, 255, 0.35);
      font-weight: bold;
      color: var(--accent-light);
      box-shadow: 0 0 8px var(--accent-light);
    }

    .room-unread {
      background: var(--accent);
      color: black;
      font-weight: 700;
      font-size: 12px;
      padding: 2px 6px;
      border-radius: 10px;
      min-width: 20px;
      text-align: center;
    }

    /* Center - Chat area */
    .chat-main {
      flex: 1;
      display: flex;
      flex-direction: column;
      background: transparent;
      padding: 16px 24px;
      overflow: hidden;
      position: relative;
    }

    .chat-header {
      font-weight: bold;
      font-size: 22px;
      margin-bottom: 12px;
      color: var(--accent-light);
      flex-shrink: 0;
      user-select: none;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .chat-header .topic {
      font-weight: normal;
      font-size: 14px;
      color: #aaa;
    }

    .messages {
      flex: 1;
      overflow-y: auto;
      padding-right: 8px;
      margin-bottom: 12px;
      display: flex;
      flex-direction: column;
      gap: 12px;
    }

    .bubble {
      max-width: 70%;
      padding: 12px 18px;
      border-radius: 16px;
      backdrop-filter: blur(8px);
      background: var(--glass-bg);
      border: 1px solid var(--glass-border);
      box-shadow: 0 2px 10px rgba(0,0,0,0.3);
      position: relative;
      white-space: pre-wrap;
      display: flex;
      flex-direction: column;
      gap: 4px;
      animation: popIn 0.25s ease, typingFade 0.25s ease;
    }

    .bubble.user {
      align-self: flex-end;
      background: rgba(0, 136, 255, 0.25);
      border-color: rgba(0, 136, 255, 0.4);
    }

    .bubble.system {
      align-self: center;
      font-style: italic;
      color: #ccc;
      border: none;
      background: transparent;
      box-shadow: none;
    }

    .name-tag {
      font-weight: bold;
      font-size: 13px;
      color: #ace;
      text-shadow: 0 0 2px rgba(0,0,0,0.5);
      user-select: text;
    }

    .bubble.user .name-tag {
      color: #8fd8ff;
    }

    .bubble-message {
      white-space: pre-wrap;
      color: #fff;
    }

    @keyframes popIn {
      0% {
        transform: scale(0.95);
        opacity: 0;
      }
      100% {
        transform: scale(1);
        opacity: 1;
      }
    }

    @keyframes typingFade {
      from {
        opacity: 0;
        transform: translateY(6px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Chat input */
    .chat-input {
      display: flex;
      gap: 12px;
      padding: 16px 0;
      backdrop-filter: blur(10px);
      background: var(--glass-bg);
      border-top: 1px solid var(--glass-border);
      flex-shrink: 0;
    }

    .chat-input input {
      flex: 1;
      padding: 12px;
      border: none;
      border-radius: 12px;
      background: rgba(255, 255, 255, 0.1);
      color: #fff;
      font-size: 16px;
    }

    .chat-input input::placeholder {
      color: #ccc;
    }

    .chat-input button {
      padding: 12px 18px;
      border: none;
      border-radius: 12px;
      background: var(--accent);
      color: white;
      font-weight: bold;
      cursor: pointer;
      box-shadow: 0 0 10px rgba(0, 170, 255, 0.4);
      font-size: 16px;
      user-select: none;
      transition: background-color 0.3s ease;
    }

    .chat-input button:hover {
      background: #0095dd;
    }

    /* Right Sidebar - Members */
    .sidebar.members {
      width: 220px;
      background: var(--glass-bg);
      border-left: 1px solid var(--glass-border);
      padding: 12px 8px;
      display: flex;
      flex-direction: column;
      overflow-y: auto;
      user-select: none;
      flex-shrink: 0;
    }

    .sidebar.members h2 {
      font-size: 18px;
      font-weight: 700;
      margin-bottom: 12px;
      padding-left: 12px;
      color: var(--accent-light);
    }

    .member-list {
      list-style: none;
      flex: 1;
      overflow-y: auto;
    }

    .member-list li {
      padding: 10px 16px;
      border-radius: 12px;
      margin-bottom: 6px;
      display: flex;
      align-items: center;
      gap: 10px;
      cursor: default;
      user-select: text;
      color: #eee;
      font-size: 14px;
      position: relative;
      transition: background-color 0.15s ease;
    }

    .member-list li.online {
      color: var(--accent-light);
      font-weight: 600;
    }

    .member-list li.offline {
      color: var(--offline-color);
      font-style: italic;
    }

    .member-status-dot {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background: var(--offline-color);
      flex-shrink: 0;
    }

    .member-list li.online .member-status-dot {
      background: var(--accent);
      box-shadow: 0 0 6px var(--accent);
    }

    .member-room-tag {
      font-size: 11px;
      color: #999;
      font-style: italic;
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      user-select: none;
    }

    /* Responsive */

    @media (max-width: 900px) {
      .sidebar.rooms,
      .sidebar.members {
        display: none;
      }

      .app-container {
        height: auto;
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <header>
    Cipher Chat
    <button id="dmBtn">💬 DM</button>
  </header>

  <div class="app-container">
    <aside class="sidebar rooms">
      <h2>Rooms</h2>
      <ul class="room-list" id="roomList"></ul>
    </aside>

    <main class="chat-main">
      <div class="chat-header" id="chatHeader">Loading...</div>
      <div class="messages" id="messages"></div>
      <div class="chat-input">
        <input type="text" id="msgInput" placeholder="Type a message..." autocomplete="off" />
        <button id="sendBtn">Send</button>
      </div>
    </main>

    <aside class="sidebar members">
      <h2>Members</h2>
      <ul class="member-list" id="memberList"></ul>
    </aside>
  </div>

  <script>
    // Mock data - replace with backend data later
    const roomsData = [
      { id: 'general', name: 'General Chat', topic: 'Discuss anything!' },
      { id: 'tech', name: 'Tech Talk', topic: 'Technology & coding' },
      { id: 'random', name: 'Random', topic: 'Off-topic fun' }
    ];

    const membersData = [
      { username: 'admin', online: true, room: 'general' },
      { username: 'MqllpW', online: true, room: 'tech' },
      { username: 'guest1', online: false, room: null },
      { username: 'alice', online: true, room: 'random' },
      { username: 'bob', online: true, room: 'general' }
    ];

    let currentRoomId = roomsData[0].id;
    let userName = null;
    let isAuthenticated = false;
    let ws = null;

    async function checkSession() {
      const res = await fetch('/api/session', { credentials: 'include' });
      const data = await res.json();
      if (!data.loggedIn) {
        alert('Session expired. Redirecting...');
        window.location.href = 'index.html';
        return null;
      }
      userName = data.user;
      return data;
    }

    function renderRooms() {
      const roomList = document.getElementById('roomList');
      roomList.innerHTML = '';
      roomsData.forEach(room => {
        const li = document.createElement('li');
        li.textContent = room.name;
        li.dataset.roomId = room.id;
        if (room.id === currentRoomId) li.classList.add('active');

        li.addEventListener('click', () => {
          if (currentRoomId === room.id) return;
          currentRoomId = room.id;
          renderRooms();
          renderChatHeader();
          clearMessages();
          loadRoomMessages(currentRoomId);
        });

        roomList.appendChild(li);
      });
    }

    function renderChatHeader() {
      const header = document.getElementById('chatHeader');
      const room = roomsData.find(r => r.id === currentRoomId);
      header.innerHTML = `${room.name} <span class="topic">— ${room.topic}</span>`;
    }

    function renderMembers() {
      const memberList = document.getElementById('memberList');
      memberList.innerHTML = '';

      membersData.forEach(member => {
        const li = document.createElement('li');
        li.textContent = member.username;
        li.title = member.online ? `Online in #${member.room}` : 'Offline';
        li.classList.add(member.online ? 'online' : 'offline');

        // status dot
        const dot = document.createElement('span');
        dot.className = 'member-status-dot';
        li.prepend(dot);

        // room tag if online & in a room
        if (member.online && member.room) {
          const roomTag = document.createElement('span');
          roomTag.className = 'member-room-tag';
          roomTag.textContent = `#${member.room}`;
          li.appendChild(roomTag);
        }

        memberList.appendChild(li);
      });
    }

    function clearMessages() {
      const messagesDiv = document.getElementById('messages');
      messagesDiv.innerHTML = '';
    }

    // For demo: mock messages per room
    const mockMessages = {
      general: [
        { user: 'admin', message: 'Welcome to General Chat!' },
        { user: 'bob', message: 'Hey everyone!' }
      ],
      tech: [
        { user: 'MqllpW', message: 'Anyone tried the new JS framework?' },
        { user: 'admin', message: 'Not yet, looks interesting.' }
      ],
      random: [
        { user: 'alice', message: 'Random stuff goes here...' }
      ]
    };

    function loadRoomMessages(roomId) {
      clearMessages();
      const messagesDiv = document.getElementById('messages');
      const messages = mockMessages[roomId] || [];

      messages.forEach(({ user, message }) => {
        appendChatMessage(user, message);
      });
    }

    function appendChatMessage(username, text) {
      const messagesDiv = document.getElementById('messages');

      const div = document.createElement('div');
      div.className = 'bubble';
      if (username === userName) div.classList.add('user');

      const name = document.createElement('div');
      name.className = 'name-tag';
      name.textContent = username;

      const msg = document.createElement('div');
      msg.className = 'bubble-message';
      msg.textContent = text;

      div.appendChild(name);
      div.appendChild(msg);

      messagesDiv.appendChild(div);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    function appendSystemMessage(text) {
      const messagesDiv = document.getElementById('messages');

      const div = document.createElement('div');
      div.className = 'bubble system';

      const msg = document.createElement('div');
      msg.className = 'bubble-message';
      msg.textContent = text;

      div.appendChild(msg);
      messagesDiv.appendChild(div);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    function sendMessage() {
      if (!isAuthenticated) {
        alert('Not authenticated.');
        return;
      }
      const input = document.getElementById('msgInput');
      const text = input.value.trim();
      if (!text) return;

      // Here you would send message to server
      // For demo, append locally and reset input
      appendChatMessage(userName, text);
      input.value = '';
      input.focus();

      // TODO: Send via WebSocket:
      // ws.send(JSON.stringify({ type: 'chat:room', room: currentRoomId, message: text }));
    }

    async function init() {
      const session = await checkSession();
      if (!session) return;

      renderRooms();
      renderChatHeader();
      renderMembers();
      loadRoomMessages(currentRoomId);

      // WebSocket connection
      const wsProtocol = location.protocol === 'https:' ? 'wss:' : 'ws:';
      ws = new WebSocket(wsProtocol + '//' + location.host);

      ws.addEventListener('open', () => {
        // Authenticate on WS (adjust according to server protocol)
        ws.send(JSON.stringify({ type: 'auth', user: userName }));
      });

      ws.addEventListener('message', evt => {
        const msg = JSON.parse(evt.data);

        switch (msg.type) {
          case 'auth:fail':
            alert('Authentication failed: ' + msg.reason);
            window.location.href = 'index.html';
            break;

          case 'auth:success':
            isAuthenticated = true;
            appendSystemMessage(`✅ Connected as ${userName}`);
            break;

          case 'chat:room':
            if (msg.room === currentRoomId) {
              appendChatMessage(msg.user, msg.message);
            }
            // Optionally track unread counts for other rooms here
            break;

          case 'chat:dm:relay':
            appendSystemMessage(`📩 DM from ${msg.from}: ${msg.message}`);
            break;

          default:
            console.warn('Unknown message type:', msg.type);
        }
      });

      ws.addEventListener('close', () => {
        appendSystemMessage('🔌 Disconnected from server.');
      });

      ws.addEventListener('error', e => {
        console.error('WebSocket error:', e);
      });

      document.getElementById('sendBtn').addEventListener('click', sendMessage);
      document.getElementById('msgInput').addEventListener('keydown', e => {
        if (e.key === 'Enter') {
          e.preventDefault();
          sendMessage();
        }
      });

      document.getElementById('dmBtn').addEventListener('click', () => {
        alert('🚧 Direct messaging coming soon!');
      });
    }

    window.onload = init;
  </script>
</body>
</html>
-----------------------------------------------------------------------





<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Cipher Login</title>
  <style>
    /* Your existing styles here */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', sans-serif;
    }

    html, body {
      width: 100%;
      height: 100%;
      background: url('karsten-winegeart-MD6wA5Nqa-k-unsplash.jpg') no-repeat center center fixed;
      background-size: cover;
      overflow-x: hidden;
      overflow-y: auto;
      color: white;
    }

    .overlay {
      position: fixed;
      top: 0; left: 0;
      width: 100%;
      height: 100%;
      backdrop-filter: blur(12px);
      background-color: rgba(0, 0, 0, 0.5);
      animation: fadeIn 1.5s ease forwards;
      z-index: 1;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    #topbar {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      backdrop-filter: blur(12px);
      background-color: rgba(0, 0, 0, 0.6);
      z-index: 100;
      padding: 20px 0;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    nav {
      display: flex;
      gap: 40px;
      flex-wrap: wrap;
    }

    nav button {
      padding: 14px 32px;
      background: transparent;
      border: 2px solid #fff;
      color: #fff;
      font-weight: 500;
      font-size: clamp(14px, 1.2vw, 20px);
      border-radius: 12px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    nav button:hover {
      background: rgba(255, 255, 255, 0.1);
      transform: scale(1.05);
    }

    .container {
      position: relative;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-wrap: wrap;
      width: 100%;
      padding: 140px 5% 80px;
      gap: 60px;
      z-index: 5;
      min-height: 100vh;
    }

    .glass-box {
      background: rgba(255, 255, 255, 0.07);
      border-radius: 30px;
      padding: clamp(40px, 6vw, 80px);
      width: clamp(420px, 45vw, 700px);
      color: #fff;
      backdrop-filter: blur(18px);
      box-shadow: 0 16px 60px rgba(0, 0, 0, 0.5);
      border: 1px solid rgba(255, 255, 255, 0.2);
      animation: popIn 3s ease both;
      display: flex;
      flex-direction: column;
      gap: 24px;
      height: auto;
    }

    @keyframes popIn {
      from {
        transform: translateY(40px);
        opacity: 0;
      }
      to {
        transform: translateY(0);
        opacity: 1;
      }
    }

    .glass-box h1 {
      font-size: clamp(28px, 3vw, 36px);
      font-weight: 700;
      text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);
    }

    .logo-placeholder {
      height: 275px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      width: auto;
    }

    .logo-image {
      max-height: 100%;
      max-width: 100%;
      object-fit: contain;
      border-radius: 12px;
    }

    .input-group input {
      width: 100%;
      padding: 18px 22px;
      background: rgba(0, 0, 0, 0.55);
      border: none;
      border-radius: 14px;
      color: #fff;
      font-size: 18px;
      outline: none;
      transition: 0.3s ease;
    }

    .input-group input:focus {
      box-shadow: 0 0 12px rgba(255, 255, 255, 0.4);
    }

    .form-buttons {
      display: flex;
      justify-content: space-between;
      gap: 24px;
      margin-top: 10px;
    }

    .form-buttons button {
      flex: 1;
      padding: 16px;
      border: none;
      border-radius: 14px;
      background: rgba(0, 0, 0, 0.75);
      color: #fff;
      font-size: 17px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .form-buttons button:hover {
      background: rgba(255, 255, 255, 0.1);
      transform: scale(1.03);
    }

    .rules h3 {
      font-size: 20px;
      margin-bottom: 10px;
      text-decoration: underline;
    }

    .rules ul {
      list-style: none;
      font-size: 16px;
      padding-left: 0;
    }

    .rules ul li::before {
      content: "• ";
      color: #ccc;
    }

    .rules ul li {
      margin: 8px 0;
    }

    .owner {
      text-align: right;
      font-size: 14px;
      color: #aaa;
      margin-top: 20px;
    }

    @media (max-width: 768px) {
      .glass-box {
        width: 90%;
      }

      nav {
        gap: 20px;
      }

      nav button {
        padding: 12px 18px;
      }
    }
  </style>
</head>
<body>
  <script>
    async function checkSession() {
      try {
        const res = await fetch('/api/session', { credentials: 'include' });
        const data = await res.json();
        if (data.loggedIn) {
          if (data.isAdmin) {
            window.location.href = `admin.html?user=${encodeURIComponent(data.user)}`;
          } else {
            window.location.href = `chat.html?user=${encodeURIComponent(data.user)}`;
          }
        }
      } catch {
        // ignore errors
      }
    }
    checkSession();
  </script>

  <div class="overlay"></div>

  <div id="topbar">
    <nav>
      <button onclick="location.href='Downloads.html'">DOWNLOADS</button>
      <button>SERVER</button>
      <button onclick="location.href='info.html'">INFO</button>
    </nav>
  </div>

  <div class="container">
    <!-- Login Box -->
    <div class="glass-box">
      <div class="logo-placeholder">
        <img src="Cipher_logoTran.png" alt="Cipher Logo" class="logo-image" />
      </div>

      <h1>CIPHER</h1>
      <div class="input-group">
        <input type="text" id="username" placeholder="Username">
      </div>
      <div class="input-group">
        <input type="password" id="password" placeholder="Password">
      </div>
      <div class="form-buttons">
        <button onclick="login()">Login</button>
        <button onclick="signup()">Sign Up</button>
      </div>
      <div id="message" style="color: lightcoral; font-weight: 700; margin-top: 10px;"></div>

      <script>
        async function login() {
          const username = document.getElementById('username').value.trim();
          const password = document.getElementById('password').value.trim();
          const messageEl = document.getElementById('message');
          messageEl.textContent = '';

          if (!username || !password) {
            messageEl.textContent = 'Please enter username and password';
            return;
          }

          try {
            const res = await fetch('/api/login', {
              method: 'POST',
              credentials: 'include',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ username, password })
            });
            const data = await res.json();

            if (data.success) {
              messageEl.style.color = 'lightgreen';
              messageEl.textContent = 'Login successful! Redirecting...';
              setTimeout(() => {
                if (data.isAdmin) {
                  window.location.href = `admin.html?user=${encodeURIComponent(username)}`;
                } else {
                  window.location.href = `chat.html?user=${encodeURIComponent(username)}`;
                }
              }, 1000);
            } else {
              messageEl.style.color = 'lightcoral';
              messageEl.textContent = data.error || 'Login failed';
            }

          } catch {
            messageEl.style.color = 'lightcoral';
            messageEl.textContent = 'Network error during login';
          }
        }

        async function signup() {
          const username = document.getElementById('username').value.trim();
          const password = document.getElementById('password').value.trim();
          const messageEl = document.getElementById('message');
          messageEl.textContent = '';

          if (!username || !password) {
            messageEl.textContent = 'Please enter username and password';
            return;
          }

          try {
            const res = await fetch('/api/signup', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ username, password })
            });
            const data = await res.json();

            if (data.success) {
              messageEl.style.color = 'lightgreen';
              messageEl.textContent = 'Signup request sent. Await admin approval.';
            } else {
              messageEl.style.color = 'lightcoral';
              messageEl.textContent = data.error || 'Signup failed';
            }
          } catch {
            messageEl.style.color = 'lightcoral';
            messageEl.textContent = 'Network error during signup';
          }
        }
      </script>
    </div>

    <!-- Server Info Box -->
    <div class="glass-box">
      <h1>SERVER NAME</h1>
      <p>Welcome to our cozy community. Please review the rules before joining!</p>
      <div class="rules">
        <h3>RULES</h3>
        <ul>
          <li>No bad words</li>
          <li>No NSFW content</li>
          <li>Guests are currently disabled</li>
          <li>Respect admins and their control</li>
        </ul>
      </div>
      <div class="owner">Owner: MqllpW</div>
    </div>
  </div>
</body>
</html>
-------------------------------------------------------
<script>
    (function () {
      const roomsListEl = document.getElementById('roomsList');
      const membersListEl = document.getElementById('membersList');
      const messagesEl = document.getElementById('messages');
      const messageInput = document.getElementById('messageInput');
      const inputForm = document.getElementById('inputArea');
      const sendButton = inputForm.querySelector('button');
      const logoutBtn = document.getElementById('logoutBtn');

      let currentRoom = null;
      let ws = null;
      let username = null;

      // Format timestamp as HH:mm
      function formatTime(ts) {
        const d = new Date(ts);
        return d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      }

      // Scroll messages to bottom
      function scrollToBottom() {
        messagesEl.scrollTop = messagesEl.scrollHeight;
      }

      // Append message to chat
      function appendMessage({ user, message, timestamp }) {
        const div = document.createElement('div');
        div.classList.add('message');

        const userSpan = document.createElement('span');
        userSpan.className = 'username';
        userSpan.textContent = user;

        const timeSpan = document.createElement('span');
        timeSpan.className = 'timestamp';
        timeSpan.textContent = formatTime(timestamp);

        const msgSpan = document.createElement('span');
        msgSpan.textContent = ': ' + message;

        div.appendChild(userSpan);
        div.appendChild(timeSpan);
        div.appendChild(msgSpan);

        messagesEl.appendChild(div);
        scrollToBottom();
      }

      // Load rooms from API
      async function loadRooms() {
        try {
          const res = await fetch('/api/rooms');
          if (!res.ok) throw new Error('Failed to load rooms');
          const rooms = await res.json();
          roomsListEl.innerHTML = '';
          rooms.forEach(room => {
            const div = document.createElement('div');
            div.className = 'room-item';
            div.textContent = room.name;
            div.dataset.roomId = room.id;
            div.title = room.topic || '';
            div.addEventListener('click', () => joinRoom(room.id));
            roomsListEl.appendChild(div);
          });
          // Auto join first room if any
          if (rooms.length > 0) {
            joinRoom(rooms[0].id);
          }
        } catch (err) {
          roomsListEl.textContent = 'Failed to load rooms.';
          console.error(err);
        }
      }

      // Load members from API
      async function loadMembers() {
        try {
          const res = await fetch('/api/members');
          if (!res.ok) throw new Error('Failed to load members');
          const members = await res.json();
          membersListEl.innerHTML = '';
          members.forEach(member => {
            const div = document.createElement('div');
            div.className = 'member-item';
            div.textContent = member.username + (member.online ? ' (Online)' : ' (Offline)');
            membersListEl.appendChild(div);
          });
        } catch (err) {
          membersListEl.textContent = 'Failed to load members.';
          console.error(err);
        }
      }

      // Load chat history (REST)
      async function loadChatHistory(roomId) {
        try {
          const res = await fetch(`/api/room/${roomId}/history?limit=50`);
          if (!res.ok) throw new Error('Failed to load chat history');
          const data = await res.json();
          messagesEl.innerHTML = '';
          data.messages.forEach(msg => {
            appendMessage({
              user: msg.username,
              message: msg.message,
              timestamp: msg.timestamp || Date.now()
            });
          });
          scrollToBottom();
        } catch (err) {
          messagesEl.textContent = 'Failed to load messages.';
          console.error(err);
        }
      }

      // Join a room (setup WS and UI)
      function joinRoom(roomId) {
        if (currentRoom === roomId) return;
        currentRoom = roomId;

        // Highlight active room
        [...roomsListEl.children].forEach(div => {
          div.classList.toggle('active', div.dataset.roomId === roomId);
        });

        // Clear messages and disable input while loading
        messagesEl.innerHTML = 'Loading messages...';
        messageInput.disabled = true;
        sendButton.disabled = true;

        // Close existing WS if any
        if (ws) {
          ws.close();
          ws = null;
        }

        loadChatHistory(roomId).then(() => {
          // Setup WebSocket for real-time chat
          ws = new WebSocket(`ws://${window.location.host}/ws`);
          ws.addEventListener('open', () => {
            ws.send(JSON.stringify({ type: 'auth' }));
            ws.send(JSON.stringify({ type: 'join:room', room: roomId }));
            messageInput.disabled = false;
            sendButton.disabled = false;
            messageInput.focus();
          });

          ws.addEventListener('message', (event) => {
            try {
              const msg = JSON.parse(event.data);
              if (msg.type === 'chat:room' && msg.room === currentRoom) {
                appendMessage({ user: msg.user, message: msg.message, timestamp: Date.now() });
              }
              if (msg.type === 'auth:fail') {
                alert('Authentication failed. Please login again.');
                window.location.href = '/';
              }
            } catch (err) {
              console.error('WS message parse error:', err);
            }
          });

          ws.addEventListener('close', () => {
            console.log('WebSocket connection closed.');
            messageInput.disabled = true;
            sendButton.disabled = true;
          });
        });
      }

      // Send chat message
      inputForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const text = messageInput.value.trim();
        if (!text || !ws || ws.readyState !== WebSocket.OPEN) return;

        ws.send(JSON.stringify({
          type: 'chat:room',
          room: currentRoom,
          message: text
        }));
        messageInput.value = '';
      });

      // Logout button
      logoutBtn.addEventListener('click', async () => {
        await fetch('/api/logout', { method: 'POST' });
        window.location.href = '/';
      });

      // Check session and initialize
      async function init() {
        try {
          const res = await fetch('/api/session');
          const data = await res.json();
          if (!data.loggedIn) {
            window.location.href = '/';
            return;
          }
          username = data.user;
          await loadRooms();
          await loadMembers();

          // Periodically refresh members list
          setInterval(loadMembers, 60000);
        } catch (err) {
          console.error('Init error:', err);
          window.location.href = '/';
        }
      }

      init();
    })();
  </script>
<style>
    :root {
      --glass-bg: rgba(30, 30, 30, 0.35);
      --glass-border: rgba(255, 255, 255, 0.2);
      --accent: #00aaff;
      --accent-light: #8fd8ff;
      --offline-color: #666;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', sans-serif;
    }

    body, html {
      height: 100%;
      background: url('karsten-winegeart-MD6wA5Nqa-k-unsplash.jpg') no-repeat center center fixed;
      background-size: cover;
      color: white;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    header {
      backdrop-filter: blur(10px);
      background: var(--glass-bg);
      border-bottom: 1px solid var(--glass-border);
      padding: 16px 24px;
      font-size: 20px;
      font-weight: bold;
      box-shadow: 0 2px 12px rgba(0,0,0,0.3);
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-shrink: 0;
      z-index: 10;
    }

    #dmBtn {
      background: transparent;
      border: 1px solid var(--glass-border);
      border-radius: 8px;
      padding: 6px 12px;
      color: white;
      cursor: pointer;
    }

    #dmBtn:hover {
      background: rgba(255, 255, 255, 0.05);
    }

    .app-container {
      display: flex;
      flex: 1;
      height: calc(100vh - 64px);
      overflow: hidden;
    }

    .sidebar.rooms {
      width: 220px;
      background: var(--glass-bg);
      border-right: 1px solid var(--glass-border);
      display: flex;
      flex-direction: column;
      padding: 12px 8px;
      overflow-y: auto;
      user-select: none;
      flex-shrink: 0;
    }

    .sidebar.rooms h2 {
      font-size: 18px;
      font-weight: 700;
      margin-bottom: 12px;
      padding-left: 12px;
      color: var(--accent-light);
    }

    .room-list {
      list-style: none;
      flex: 1;
      overflow-y: auto;
    }

    .room-list li {
      padding: 10px 16px;
      border-radius: 12px;
      cursor: pointer;
      margin-bottom: 6px;
      transition: background-color 0.2s ease;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .room-list li:hover {
      background: rgba(0, 136, 255, 0.15);
    }

    .room-list li.active {
      background: rgba(0, 136, 255, 0.35);
      font-weight: bold;
      color: var(--accent-light);
      box-shadow: 0 0 8px var(--accent-light);
    }

    .room-unread {
      background: var(--accent);
      color: black;
      font-weight: 700;
      font-size: 12px;
      padding: 2px 6px;
      border-radius: 10px;
      min-width: 20px;
      text-align: center;
    }

    .chat-main {
      flex: 1;
      display: flex;
      flex-direction: column;
      background: transparent;
      padding: 16px 24px;
      overflow: hidden;
      position: relative;
    }

    .chat-header {
      font-weight: bold;
      font-size: 22px;
      margin-bottom: 12px;
      color: var(--accent-light);
      flex-shrink: 0;
      user-select: none;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .chat-header .topic {
      font-weight: normal;
      font-size: 14px;
      color: #aaa;
    }

    .messages {
      flex: 1;
      overflow-y: auto;
      padding-right: 8px;
      margin-bottom: 12px;
      display: flex;
      flex-direction: column;
      gap: 12px;
    }

    .bubble {
      max-width: 70%;
      padding: 12px 18px;
      border-radius: 16px;
      backdrop-filter: blur(8px);
      background: var(--glass-bg);
      border: 1px solid var(--glass-border);
      box-shadow: 0 2px 10px rgba(0,0,0,0.3);
      position: relative;
      white-space: pre-wrap;
      display: flex;
      flex-direction: column;
      gap: 4px;
      animation: popIn 0.25s ease, typingFade 0.25s ease;
    }

    .bubble.user {
      align-self: flex-end;
      background: rgba(0, 136, 255, 0.25);
      border-color: rgba(0, 136, 255, 0.4);
    }

    .bubble.system {
      align-self: center;
      font-style: italic;
      color: #ccc;
      border: none;
      background: transparent;
      box-shadow: none;
    }

    .name-tag {
      font-weight: bold;
      font-size: 13px;
      color: #ace;
      text-shadow: 0 0 2px rgba(0,0,0,0.5);
      user-select: text;
    }

    .bubble.user .name-tag {
      color: #8fd8ff;
    }

    .bubble-message {
      white-space: pre-wrap;
      color: #fff;
    }

    @keyframes popIn {
      0% {
        transform: scale(0.95);
        opacity: 0;
      }
      100% {
        transform: scale(1);
        opacity: 1;
      }
    }

    @keyframes typingFade {
      from {
        opacity: 0;
        transform: translateY(6px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .chat-input {
      display: flex;
      gap: 12px;
      padding: 16px 0;
      backdrop-filter: blur(10px);
      background: var(--glass-bg);
      border-top: 1px solid var(--glass-border);
      flex-shrink: 0;
    }

    .chat-input input {
      flex: 1;
      padding: 12px;
      border: none;
      border-radius: 12px;
      background: rgba(255, 255, 255, 0.1);
      color: #fff;
      font-size: 16px;
    }

    .chat-input input::placeholder {
      color: #ccc;
    }

    .chat-input button {
      padding: 12px 18px;
      border: none;
      border-radius: 12px;
      background: var(--accent);
      color: white;
      font-weight: bold;
      cursor: pointer;
      box-shadow: 0 0 10px rgba(0, 170, 255, 0.4);
      font-size: 16px;
      user-select: none;
      transition: background-color 0.3s ease;
    }

    .chat-input button:hover {
      background: #0095dd;
    }

    .sidebar.members {
      width: 220px;
      background: var(--glass-bg);
      border-left: 1px solid var(--glass-border);
      padding: 12px 8px;
      display: flex;
      flex-direction: column;
      overflow-y: auto;
      user-select: none;
      flex-shrink: 0;
    }

    .sidebar.members h2 {
      font-size: 18px;
      font-weight: 700;
      margin-bottom: 12px;
      padding-left: 12px;
      color: var(--accent-light);
    }

    .member-list {
      list-style: none;
      flex: 1;
      overflow-y: auto;
    }

    .member-list li {
      padding: 10px 16px;
      border-radius: 12px;
      margin-bottom: 6px;
      display: flex;
      align-items: center;
      gap: 10px;
      cursor: default;
      user-select: text;
      color: #eee;
      font-size: 14px;
      position: relative;
      transition: background-color 0.15s ease;
    }

    .member-list li.online {
      color: var(--accent-light);
      font-weight: 600;
    }

    .member-list li.offline {
      color: var(--offline-color);
      font-style: italic;
    }

    .member-status-dot {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background: var(--offline-color);
      flex-shrink: 0;
    }

    .member-list li.online .member-status-dot {
      background: var(--accent);
      box-shadow: 0 0 6px var(--accent);
    }

    .member-room-tag {
      font-size: 11px;
      color: #999;
      font-style: italic;
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      user-select: none;
    }

    @media (max-width: 900px) {
      .sidebar.rooms,
      .sidebar.members {
        display: none;
      }

      .app-container {
        height: auto;
        flex-direction: column;
      }
    }
  </style>